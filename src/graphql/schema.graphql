scalar JSON

type Mutation {
  newUser(username:String!): User
  newCampaign(name:String!,coiinTotal:Float!,target:String!,targetVideo:String!,beginDate:String!,endDate:String!,description:String,company:String, algorithm: String!): Campaign
  updateCampaign(name:String!,coiinTotal:Float,target:String,targetVideo:String,beginDate:String,endDate:String,description:String): Campaign
  generateCampaignAuditReport(campaignId:String!): AuditReport
  payoutCampaignRewards(campaignId: String!, rejected: [String]!): Boolean
  deleteCampaign(id:String!): Campaign
  participate(campaignId:String!): Participant
  removeParticipation(campaignId:String!): User
  trackAction(participantId:String!,action: String!): Participant
  promoteUserPermissions(userId:String,email:String,company:String,role:String): User
}

type Query {
  getCurrentCampaignTier(campaignId: String!): CurrentTier
  usernameExists(username:String!): UserExistence
  listCampaigns(open:Boolean,skip:Int,take:Int,scoped:Boolean): PaginatedCampaignResults
  getCampaign(id:String): Campaign
  getParticipant(id:String): Participant
  campaignGet(campaignId:String!): Campaign
  listUsers(skip:Int,take:Int): PaginatedUserResults
  helloWorld: String
  me: User
}

type CurrentTier {
  currentTier: Int
  currentTotal: Float
}

type UserExistence {
  exists: Boolean
}

type User {
  id: String
  email: String
  username: String
  campaigns: [Participant]
  wallet: Wallet
}

type Wallet {
  id: String
  balance: Float
}

type PaginatedUserResults {
  results: [User]
  total: Int
}

type PaginatedCampaignResults {
  results: [Campaign]
  total: Int
}

type Campaign {
  id: String
  name: String
  beginDate: String
  endDate: String
  coiinTotal: Float
  totalParticipationScore: Int
  target: String
  description: String
  company: String
  algorithm: JSON
  audited: Boolean
  targetVideo: String
  participants: [Participant]
}

type Participant {
  id: String
  metrics: ParticipantMetrics
  user: User
  campaign: Campaign
  participationScore: Int
}

type ParticipantMetrics {
  viewCount: Int
  clickCount: Int
  submissionCount: Int
  participationScore: Int
}

type ParticipantAudit {
  participantId: String
  viewPayout: Float,
  clickPayout: Float,
  submissionPayout: Float,
  totalPayout: Float
}

type AuditReport {
  totalViews: Int
  totalClicks: Int
  totalSubmissions: Int
  totalRewardPayout: Float
  flaggedParticipants: [ParticipantAudit]
}
