scalar JSON

type Mutation {
  newUser(username:String!, deviceToken:String!): User
  newCampaign(
    name:String!,
    coiinTotal:Float!,
    target:String!,
    targetVideo:String!,
    beginDate:String!,
    endDate:String!,
    description:String,
    company:String,
    algorithm: String!,
    image: String,
    tagline: String,
    suggestedPosts:[String],
    suggestedTags:[String]): Campaign
  updateCampaign(
    name:String!,
    coiinTotal:Float,
    target:String,
    targetVideo:String,
    beginDate:String,
    endDate:String,
    description:String,
    image:String,
    suggestedPosts:[String],
    suggestedTags:[String]): Campaign
  generateCampaignAuditReport(campaignId:String!): AuditReport
  payoutCampaignRewards(campaignId: String!, rejected: [String]!): Boolean
  deleteCampaign(id:String!): Campaign
  participate(campaignId:String!,username:String!): Participant
  removeParticipation(campaignId:String!): User
  trackAction(participantId:String!,action: String!): Participant
  promoteUserPermissions(userId:String,email:String,company:String,role:String): User
  registerSocialLink(type:String!,apiKey:String!,apiSecret:String): Boolean
  removeSocialLink(type:String!): Boolean
  postToSocial(type:String!,text:String!,photo:String,participantId:String!): String
  setDevice(deviceToken:String!): Boolean
  registerFactorLink(factor: JSON): User
}

type Query {
  getCurrentCampaignTier(campaignId: String!): CurrentTier
  usernameExists(username:String!,campaignId:String!): UserExistence
  listCampaigns(open:Boolean,skip:Int,take:Int,scoped:Boolean): PaginatedCampaignResults
  getCampaign(id:String): Campaign
  getParticipant(id:String): Participant
  getParticipantPosts(id:String): [String]
  getSocialMetrics(id:String!): SocialMetrics
  campaignGet(campaignId:String!): Campaign
  listUsers(skip:Int,take:Int): PaginatedUserResults
  helloWorld: String
  me: User
}

type SocialMetrics {
  totalLikes: Float
  totalShares: Float
  likesScore: Float
  shareScore: Float
}

type CurrentTier {
  currentTier: Int
  currentTotal: Float
}

type UserExistence {
  exists: Boolean
}

type User {
  id: String
  email: String
  campaigns: [Participant]
  wallet: Wallet
  socialLinks: [SocialLink]
}

type FactorLink {
  factorId: String
  identityId: String
  providerId: String
}

type SocialLink {
  type: String
}

type Wallet {
  id: String
  balance: Float
}

type PaginatedUserResults {
  results: [User]
  total: Int
}

type PaginatedCampaignResults {
  results: [Campaign]
  total: Int
}

type PaginatedSocialPostResults {
  results: [SocialPost]
}

type Campaign {
  id: String
  name: String
  beginDate: String
  endDate: String
  coiinTotal: Float
  totalParticipationScore: Int
  target: String
  description: String
  company: String
  algorithm: JSON
  audited: Boolean
  targetVideo: String
  imagePath: String
  tagline: String
  suggestedPosts: [String]
  suggestedTags: [String]
  participants: [Participant]
}

type Participant {
  id: String
  username: String
  metrics: ParticipantMetrics
  user: User
  campaign: Campaign
  link: String
  participationScore: Int
}

type SocialPost {
  id: String
  type: String
  likes: Int
  shares: Int
  comments: Int
  participantId: String
}

type ParticipantMetrics {
  viewCount: Int
  clickCount: Int
  submissionCount: Int
  participationScore: Int
}

type ParticipantAudit {
  participantId: String
  viewPayout: Float,
  clickPayout: Float,
  submissionPayout: Float,
  totalPayout: Float
}

type AuditReport {
  totalViews: Int
  totalClicks: Int
  totalSubmissions: Int
  totalRewardPayout: Float
  flaggedParticipants: [ParticipantAudit]
}
