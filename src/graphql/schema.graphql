scalar JSON

type Mutation {
  newCampaign(
    name:String!,
    coiinTotal:Float!,
    target:String!,
    targetVideo:String!,
    beginDate:String!,
    endDate:String!,
    description:String,
    company:String,
    algorithm: String!,
    image: String,
    tagline: String,
    suggestedPosts:[String],
    suggestedTags:[String]): Campaign
  updateCampaign(
    id:String!
    name:String,
    coiinTotal:Float,
    target:String,
    targetVideo:String,
    beginDate:String,
    endDate:String,
    description:String,
    image:String,
    suggestedPosts:[String],
    suggestedTags:[String]): Campaign
  generateCampaignAuditReport(campaignId:String!): AuditReport
  payoutCampaignRewards(campaignId: String!, rejected: [String]!): Boolean
  deleteCampaign(id:String!): Campaign
  participate(campaignId:String!): Participant
  removeParticipation(campaignId:String!): User
  trackAction(participantId:String!,action: String!): Participant
  promoteUserPermissions(userId:String,email:String,company:String,role:String): User
  registerSocialLink(type:String!,apiKey:String!,apiSecret:String!): Boolean
  removeSocialLink(type:String!): Boolean
  postToSocial(type:String!,text:String!,photo:String,video:String,participantId:String!): String
  setDevice(deviceToken:String!): Boolean
  registerFactorLink(factor: JSON): User
  updateUsername(username:String!): User
  removeFactorLink(factorId:String!): User
  registerKyc(userKyc:JSON!): KycUser
  updateKyc(user: JSON!): KycUser
  initiateWithdraw(withdrawAmount:Float!, ethAddress:String): Transfer
  updateWithdrawStatus(transferIds:[String]!,status:String!): [Transfer]
  setRecoveryCode(code:Int!): User
  updateKycStatus(userId:String!,status:String!): User
  updateProfileInterests(
    city:String
    country:String
    state:String
    ageRange:String
    interests:[String]
    values:[String]
  ): User
  removeProfileInterests(
    interest:String
    value:String
    ageRange:String
    city:String
    state:String
    country:String
  ): User
  generateFactorsFromKyc(factors:[JSON]): JSON
}

type Query {
  getCurrentCampaignTier(campaignId: String!): CurrentTier
  usernameExists(username:String!): UserExistence
  listCampaigns(open:Boolean,skip:Int,take:Int,scoped:Boolean): PaginatedCampaignResults
  getCampaign(id:String): Campaign
  getParticipant(id:String): Participant
  getParticipantPosts(id:String): [String]
  getSocialMetrics(id:String!): SocialMetrics
  campaignGet(campaignId:String!): Campaign
  getParticipantByCampaignId(campaignId:String!): Participant
  getParticipantMetrics(participantId:String!): [ParticipantMetric]
  getUserMetrics(today:Boolean): [ParticipantMetric]
  listUsers(skip:Int,take:Int): PaginatedUserResults
  helloWorld: String
  isLastFactor: Boolean
  me(openCampaigns: Boolean): User
  getKyc: KycUser
  getWithdrawals(status:String): [AdminWithdrawal]
  accountExists(id:String!): UserExistence
  getCampaignMetrics(campaignId:String!): AdminCampaignMetrics
  getFollowerCount: FollowerCounts
  getPreviousDayMetrics: JSON
  getEstimatedGasPrice: String
}

type FactorGeneration {
  FactorName: String!
  FactorId: String!
}

type ParticipantMetric {
  id: String
  campaignId: String
  clickCount: Int
  viewCount: Int
  submissionCount: Int
  likeCount: Int
  shareCount: Int
  commentCount: Int
  participationScore: Float
  totalParticipationScore: Float
  participantId: String
  createdAt: String
  updatedAt: String
}

type AdminCampaignMetrics {
  clickCount: Int
  viewCount: Int
  submissionCount: Int
  postCount: Int
  likeCount: Int
  commentCount: Int
  shareCount: Int
}

type AdminWithdrawal {
  user: User
  totalPendingWithdrawal: Float
  totalAnnualWithdrawn: Float
  transfers: [Transfer]
  kyc: KycUser
}

type Transfer {
  id: String
  amount: Float
  action: String
  withdrawStatus: String
  campaign: Campaign
  createdAt: String
  updatedAt: String
  wallet: Wallet
}

type TwentyFourHourMetric {
  id: String
  score: Float
  createdAt: String
}

type SocialMetrics {
  totalLikes: Float
  totalShares: Float
  likesScore: Float
  shareScore: Float
}

type CurrentTier {
  currentTier: Int
  currentTotal: Float
}

type UserExistence {
  exists: Boolean
}

type User {
  id: String
  email: String
  username: String
  campaigns: [Participant]
  wallet: Wallet
  hasRecoveryCodeSet: Boolean
  identityId: String
  kycStatus: String
  socialLinks: [SocialLink]
  factorLinks: [FactorLink]
  twentyFourHourMetrics: [TwentyFourHourMetric]
  ageRange:String
  city:String
  country:String
  state:String
  interests:[String]
  values:[String]
}

type PublicUser {
  id: String
  username: String
  ageRange:String
}

type KycUser {
  firstName: String
  lastName: String
  businessName: String
  address: JSON
  phoneNumber: String
  email: String
  paypalEmail: String
  idProof: String
  addressProof: String
  exceptions: String
  typeOfStructure: String
  accountNumbers: String
  ssn: String
  hasIdProof: Boolean
  hasAddressProof: Boolean
}

type FactorLink {
  factorId: String
  identityId: String
  providerId: String
  type: String
}

type SocialLink {
  type: String
}

type Wallet {
  id: String
  balance: Float
  transfers: [Transfer]
}

type PaginatedUserResults {
  results: [User]
  total: Int
}

type PaginatedCampaignResults {
  results: [Campaign]
  total: Int
}

type PaginatedSocialPostResults {
  results: [SocialPost]
}

type Campaign {
  id: String
  name: String
  beginDate: String
  endDate: String
  coiinTotal: Float
  totalParticipationScore: Float
  target: String
  description: String
  company: String
  algorithm: JSON
  audited: Boolean
  targetVideo: String
  imagePath: String
  tagline: String
  suggestedPosts: [String]
  suggestedTags: [String]
  participants: [Participant]
}

type Participant {
  id: String
  metrics: ParticipantMetrics
  user: PublicUser
  campaign: Campaign
  link: String
  participationScore: Float
}

type SocialPost {
  id: String
  type: String
  likes: Int
  shares: Int
  comments: Int
  participantId: String
}

type ParticipantMetrics {
  viewCount: Int
  clickCount: Int
  submissionCount: Int
  participationScore: Float
}

type ParticipantAudit {
  participantId: String
  viewPayout: Float,
  clickPayout: Float,
  submissionPayout: Float,
  totalPayout: Float
}

type FollowerCounts {
  twitter: Int
  facebook: Int
}

type AuditReport {
  totalViews: Int
  totalClicks: Int
  totalSubmissions: Int
  totalRewardPayout: Float
  flaggedParticipants: [ParticipantAudit]
}
